# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
service: rust-sls
provider:
  name: aws
  runtime: rust
  memorySize: 128
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  individually: true

plugins:
  - serverless-rust
  - serverless-funch

functions:
  lambda_1:
    # handler value syntax is `{cargo-package-name}.{bin-name}`
    # or `{cargo-package-name}` for short when you are building a
    # default bin for a given package.
    handler: lambda_1
    role: RustSlsLambdaRole
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: users/create
          method: get
          cors: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: RustSlsApiGatewayAuthorizer

#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

  world:
    handler: world
    events:
      - http:
          path: /
          method: get

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    RustSlsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: rust-sls-aws
        WebsiteConfiguration:
          IndexDocument: index.html
    RustSlsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: "RustSlsBucket"
        PolicyDocument:
          Statement:
            -
              Effect: "Allow"
              Principal: "*"
              Action:
                - "s3:GetObject"
              Resource:
                Fn::Join:
                  - ""
                  -
                    - "arn:aws:s3:::"
                    -
                      Ref: "RustSlsBucket"
                    - "/*"
    RustSlsCognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: RustSls
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    RustSlsCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: RustSlsWebApp
        GenerateSecret: false
        UserPoolId:
          Ref: "RustSlsCognitoUserPool"
    RustSlsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Rides
        AttributeDefinitions:
          - AttributeName: RideId
            AttributeType: S
        KeySchema:
          - AttributeName: RideId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    RustSlsLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: RustSlsLambda
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: DynamoDBWriteAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    'Fn::GetAtt': [ RustSlsDynamoDBTable, Arn ]
    RustSlsApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: RustSls
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [ RustSlsCognitoUserPool, Arn ]
        IdentitySource: method.request.header.Authorization
  Outputs:
    RustSlsBucketURL:
      Description: "RustSls Bucket Website URL"
      Value:
        "Fn::GetAtt": [ RustSlsBucket, WebsiteURL ]
    RustSlsCognitoUserPoolId:
      Description: "RustSls Cognito User Pool ID"
      Value:
        Ref: "RustSlsCognitoUserPool"
    RustSlsCognitoUserPoolClientId:
      Description: "RustSls Cognito User Pool Client ID"
      Value:
        Ref: "RustSlsCognitoUserPoolClient"
    RustSlsDynamoDbARN:
      Description: "RustSls DynamoDB ARN"
      Value:
        "Fn::GetAtt": [ RustSlsDynamoDBTable, Arn ]

custom:
  client:
    bucketName: rust-sls-aws
    distributionFolder: assets